
software.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000002d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000069b  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d4  00000000  00000000  00000a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cc  00000000  00000000  00000ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  000012c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031b  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000021  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  74:	0c 94 2f 01 	jmp	0x25e	; 0x25e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_init>:
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0x00;
  7c:	17 b8       	out	0x07, r1	; 7
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<7) | (1<<1) | (1<<0);
  7e:	83 e8       	ldi	r24, 0x83	; 131
  80:	86 b9       	out	0x06, r24	; 6
  82:	08 95       	ret

00000084 <ADC_readChannel>:
}

unsigned short ADC_readChannel(unsigned char channel_num)
{
//	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
  84:	97 b1       	in	r25, 0x07	; 7
  86:	90 7e       	andi	r25, 0xE0	; 224
  88:	97 b9       	out	0x07, r25	; 7
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
  8a:	97 b1       	in	r25, 0x07	; 7
  8c:	89 2b       	or	r24, r25
  8e:	87 b9       	out	0x07, r24	; 7
	SET_BIT(ADCSRA,6); /* start conversion write '1' to ADSC */
  90:	86 b1       	in	r24, 0x06	; 6
  92:	80 64       	ori	r24, 0x40	; 64
  94:	86 b9       	out	0x06, r24	; 6
//	ADCSRA |= (1<<ADSC);
	while(BIT_IS_CLEAR(ADCSRA,4)); /* wait for conversion to complete ADIF becomes '1' */
  96:	34 9b       	sbis	0x06, 4	; 6
  98:	fe cf       	rjmp	.-4      	; 0x96 <ADC_readChannel+0x12>
	SET_BIT(ADCSRA,4); /* clear ADIF by write '1' to it :) */
  9a:	86 b1       	in	r24, 0x06	; 6
  9c:	80 61       	ori	r24, 0x10	; 16
  9e:	86 b9       	out	0x06, r24	; 6
	return ADC; /* return the data register */
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	95 b1       	in	r25, 0x05	; 5
}
  a4:	08 95       	ret

000000a6 <main>:
volatile unsigned int volt=0;
volatile float	x=0;
int main(void)
{
    /* Replace with your application code */
	ADC_init();
  a6:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_init>
DDRC=0xFF;
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	84 bb       	out	0x14, r24	; 20
PORTC=0x00;
  ae:	15 ba       	out	0x15, r1	; 21
    while (1) 
    {
	volt= ADC_readChannel(0);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 42 00 	call	0x84	; 0x84 <ADC_readChannel>
  b6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <volt+0x1>
  ba:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <volt>
	x=(float)((volt*5)/1023);
  be:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <volt>
  c2:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <volt+0x1>
  c6:	9c 01       	movw	r18, r24
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	82 0f       	add	r24, r18
  d2:	93 1f       	adc	r25, r19
  d4:	6f ef       	ldi	r22, 0xFF	; 255
  d6:	73 e0       	ldi	r23, 0x03	; 3
  d8:	0e 94 1b 01 	call	0x236	; 0x236 <__udivmodhi4>
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 b5 00 	call	0x16a	; 0x16a <__floatunsisf>
  e4:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
  e8:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  f0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	PORTC=x;	
  f4:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f8:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 100:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 104:	0e 94 86 00 	call	0x10c	; 0x10c <__fixunssfsi>
 108:	65 bb       	out	0x15, r22	; 21
 10a:	d2 cf       	rjmp	.-92     	; 0xb0 <main+0xa>

0000010c <__fixunssfsi>:
 10c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <__fp_splitA>
 110:	88 f0       	brcs	.+34     	; 0x134 <__fixunssfsi+0x28>
 112:	9f 57       	subi	r25, 0x7F	; 127
 114:	98 f0       	brcs	.+38     	; 0x13c <__fixunssfsi+0x30>
 116:	b9 2f       	mov	r27, r25
 118:	99 27       	eor	r25, r25
 11a:	b7 51       	subi	r27, 0x17	; 23
 11c:	b0 f0       	brcs	.+44     	; 0x14a <__fixunssfsi+0x3e>
 11e:	e1 f0       	breq	.+56     	; 0x158 <__fixunssfsi+0x4c>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	88 1f       	adc	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	1a f0       	brmi	.+6      	; 0x130 <__fixunssfsi+0x24>
 12a:	ba 95       	dec	r27
 12c:	c9 f7       	brne	.-14     	; 0x120 <__fixunssfsi+0x14>
 12e:	14 c0       	rjmp	.+40     	; 0x158 <__fixunssfsi+0x4c>
 130:	b1 30       	cpi	r27, 0x01	; 1
 132:	91 f0       	breq	.+36     	; 0x158 <__fixunssfsi+0x4c>
 134:	0e 94 14 01 	call	0x228	; 0x228 <__fp_zero>
 138:	b1 e0       	ldi	r27, 0x01	; 1
 13a:	08 95       	ret
 13c:	0c 94 14 01 	jmp	0x228	; 0x228 <__fp_zero>
 140:	67 2f       	mov	r22, r23
 142:	78 2f       	mov	r23, r24
 144:	88 27       	eor	r24, r24
 146:	b8 5f       	subi	r27, 0xF8	; 248
 148:	39 f0       	breq	.+14     	; 0x158 <__fixunssfsi+0x4c>
 14a:	b9 3f       	cpi	r27, 0xF9	; 249
 14c:	cc f3       	brlt	.-14     	; 0x140 <__fixunssfsi+0x34>
 14e:	86 95       	lsr	r24
 150:	77 95       	ror	r23
 152:	67 95       	ror	r22
 154:	b3 95       	inc	r27
 156:	d9 f7       	brne	.-10     	; 0x14e <__fixunssfsi+0x42>
 158:	3e f4       	brtc	.+14     	; 0x168 <__fixunssfsi+0x5c>
 15a:	90 95       	com	r25
 15c:	80 95       	com	r24
 15e:	70 95       	com	r23
 160:	61 95       	neg	r22
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	8f 4f       	sbci	r24, 0xFF	; 255
 166:	9f 4f       	sbci	r25, 0xFF	; 255
 168:	08 95       	ret

0000016a <__floatunsisf>:
 16a:	e8 94       	clt
 16c:	09 c0       	rjmp	.+18     	; 0x180 <__floatsisf+0x12>

0000016e <__floatsisf>:
 16e:	97 fb       	bst	r25, 7
 170:	3e f4       	brtc	.+14     	; 0x180 <__floatsisf+0x12>
 172:	90 95       	com	r25
 174:	80 95       	com	r24
 176:	70 95       	com	r23
 178:	61 95       	neg	r22
 17a:	7f 4f       	sbci	r23, 0xFF	; 255
 17c:	8f 4f       	sbci	r24, 0xFF	; 255
 17e:	9f 4f       	sbci	r25, 0xFF	; 255
 180:	99 23       	and	r25, r25
 182:	a9 f0       	breq	.+42     	; 0x1ae <__floatsisf+0x40>
 184:	f9 2f       	mov	r31, r25
 186:	96 e9       	ldi	r25, 0x96	; 150
 188:	bb 27       	eor	r27, r27
 18a:	93 95       	inc	r25
 18c:	f6 95       	lsr	r31
 18e:	87 95       	ror	r24
 190:	77 95       	ror	r23
 192:	67 95       	ror	r22
 194:	b7 95       	ror	r27
 196:	f1 11       	cpse	r31, r1
 198:	f8 cf       	rjmp	.-16     	; 0x18a <__floatsisf+0x1c>
 19a:	fa f4       	brpl	.+62     	; 0x1da <__floatsisf+0x6c>
 19c:	bb 0f       	add	r27, r27
 19e:	11 f4       	brne	.+4      	; 0x1a4 <__floatsisf+0x36>
 1a0:	60 ff       	sbrs	r22, 0
 1a2:	1b c0       	rjmp	.+54     	; 0x1da <__floatsisf+0x6c>
 1a4:	6f 5f       	subi	r22, 0xFF	; 255
 1a6:	7f 4f       	sbci	r23, 0xFF	; 255
 1a8:	8f 4f       	sbci	r24, 0xFF	; 255
 1aa:	9f 4f       	sbci	r25, 0xFF	; 255
 1ac:	16 c0       	rjmp	.+44     	; 0x1da <__floatsisf+0x6c>
 1ae:	88 23       	and	r24, r24
 1b0:	11 f0       	breq	.+4      	; 0x1b6 <__floatsisf+0x48>
 1b2:	96 e9       	ldi	r25, 0x96	; 150
 1b4:	11 c0       	rjmp	.+34     	; 0x1d8 <__floatsisf+0x6a>
 1b6:	77 23       	and	r23, r23
 1b8:	21 f0       	breq	.+8      	; 0x1c2 <__floatsisf+0x54>
 1ba:	9e e8       	ldi	r25, 0x8E	; 142
 1bc:	87 2f       	mov	r24, r23
 1be:	76 2f       	mov	r23, r22
 1c0:	05 c0       	rjmp	.+10     	; 0x1cc <__floatsisf+0x5e>
 1c2:	66 23       	and	r22, r22
 1c4:	71 f0       	breq	.+28     	; 0x1e2 <__floatsisf+0x74>
 1c6:	96 e8       	ldi	r25, 0x86	; 134
 1c8:	86 2f       	mov	r24, r22
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	2a f0       	brmi	.+10     	; 0x1da <__floatsisf+0x6c>
 1d0:	9a 95       	dec	r25
 1d2:	66 0f       	add	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	88 1f       	adc	r24, r24
 1d8:	da f7       	brpl	.-10     	; 0x1d0 <__floatsisf+0x62>
 1da:	88 0f       	add	r24, r24
 1dc:	96 95       	lsr	r25
 1de:	87 95       	ror	r24
 1e0:	97 f9       	bld	r25, 7
 1e2:	08 95       	ret

000001e4 <__fp_split3>:
 1e4:	57 fd       	sbrc	r21, 7
 1e6:	90 58       	subi	r25, 0x80	; 128
 1e8:	44 0f       	add	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	59 f0       	breq	.+22     	; 0x204 <__fp_splitA+0x10>
 1ee:	5f 3f       	cpi	r21, 0xFF	; 255
 1f0:	71 f0       	breq	.+28     	; 0x20e <__fp_splitA+0x1a>
 1f2:	47 95       	ror	r20

000001f4 <__fp_splitA>:
 1f4:	88 0f       	add	r24, r24
 1f6:	97 fb       	bst	r25, 7
 1f8:	99 1f       	adc	r25, r25
 1fa:	61 f0       	breq	.+24     	; 0x214 <__fp_splitA+0x20>
 1fc:	9f 3f       	cpi	r25, 0xFF	; 255
 1fe:	79 f0       	breq	.+30     	; 0x21e <__fp_splitA+0x2a>
 200:	87 95       	ror	r24
 202:	08 95       	ret
 204:	12 16       	cp	r1, r18
 206:	13 06       	cpc	r1, r19
 208:	14 06       	cpc	r1, r20
 20a:	55 1f       	adc	r21, r21
 20c:	f2 cf       	rjmp	.-28     	; 0x1f2 <__fp_split3+0xe>
 20e:	46 95       	lsr	r20
 210:	f1 df       	rcall	.-30     	; 0x1f4 <__fp_splitA>
 212:	08 c0       	rjmp	.+16     	; 0x224 <__fp_splitA+0x30>
 214:	16 16       	cp	r1, r22
 216:	17 06       	cpc	r1, r23
 218:	18 06       	cpc	r1, r24
 21a:	99 1f       	adc	r25, r25
 21c:	f1 cf       	rjmp	.-30     	; 0x200 <__fp_splitA+0xc>
 21e:	86 95       	lsr	r24
 220:	71 05       	cpc	r23, r1
 222:	61 05       	cpc	r22, r1
 224:	08 94       	sec
 226:	08 95       	ret

00000228 <__fp_zero>:
 228:	e8 94       	clt

0000022a <__fp_szero>:
 22a:	bb 27       	eor	r27, r27
 22c:	66 27       	eor	r22, r22
 22e:	77 27       	eor	r23, r23
 230:	cb 01       	movw	r24, r22
 232:	97 f9       	bld	r25, 7
 234:	08 95       	ret

00000236 <__udivmodhi4>:
 236:	aa 1b       	sub	r26, r26
 238:	bb 1b       	sub	r27, r27
 23a:	51 e1       	ldi	r21, 0x11	; 17
 23c:	07 c0       	rjmp	.+14     	; 0x24c <__udivmodhi4_ep>

0000023e <__udivmodhi4_loop>:
 23e:	aa 1f       	adc	r26, r26
 240:	bb 1f       	adc	r27, r27
 242:	a6 17       	cp	r26, r22
 244:	b7 07       	cpc	r27, r23
 246:	10 f0       	brcs	.+4      	; 0x24c <__udivmodhi4_ep>
 248:	a6 1b       	sub	r26, r22
 24a:	b7 0b       	sbc	r27, r23

0000024c <__udivmodhi4_ep>:
 24c:	88 1f       	adc	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	5a 95       	dec	r21
 252:	a9 f7       	brne	.-22     	; 0x23e <__udivmodhi4_loop>
 254:	80 95       	com	r24
 256:	90 95       	com	r25
 258:	bc 01       	movw	r22, r24
 25a:	cd 01       	movw	r24, r26
 25c:	08 95       	ret

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
